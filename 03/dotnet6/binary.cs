int[] Test = { 0b00100, 0b11110, 0b10110, 0b10111, 0b10101, 0b01111, 0b00111, 0b11100, 0b10000, 0b11001, 0b00010, 0b01010 };
int[] Real = {0b110000000001,
0b010011111011,
0b111000011110,
0b110101011110,
0b100000010100,
0b000101101111,
0b110100101000,
0b011100010001,
0b101001011011,
0b011000001100,
0b111101001011,
0b010001100100,
0b100101011010,
0b111101110101,
0b101001111100,
0b010010010101,
0b011100011000,
0b010110011101,
0b110001110101,
0b001111000010,
0b111011001011,
0b111111111110,
0b010000000100,
0b001011111101,
0b100111110101,
0b011011110100,
0b110101000100,
0b111010001110,
0b110101001011,
0b011100100110,
0b011100001001,
0b101001111101,
0b111111000010,
0b010010001100,
0b110010011001,
0b010100010010,
0b011010010000,
0b101111000100,
0b001010100101,
0b100010010100,
0b001000000110,
0b000011110100,
0b101101100001,
0b111100000111,
0b011010001110,
0b010110001000,
0b111101111010,
0b001001010111,
0b011001010011,
0b000111000010,
0b000010110001,
0b101000010111,
0b111010000100,
0b111001110111,
0b000000110001,
0b011111000110,
0b010110010111,
0b110100001001,
0b101100110110,
0b100111111000,
0b110000110000,
0b110110111101,
0b110011011100,
0b010001010010,
0b011011000101,
0b000001100010,
0b011001101001,
0b000111111011,
0b111000001101,
0b110100000101,
0b011000011011,
0b100101100110,
0b001001000001,
0b111011011010,
0b010101110110,
0b100011100000,
0b100000001011,
0b110101111001,
0b000101001000,
0b110111111010,
0b011001111111,
0b101000000101,
0b101000011111,
0b010010000111,
0b101101111100,
0b101110100001,
0b100111100101,
0b101111001100,
0b110101001111,
0b011100001111,
0b010000011110,
0b000010111111,
0b011110100101,
0b100010010110,
0b011101110011,
0b000000010111,
0b110111000110,
0b100110010100,
0b011110101111,
0b101101000111,
0b111111011100,
0b110000100010,
0b010110001010,
0b011001000100,
0b111001100011,
0b111101110100,
0b000011011100,
0b110011010001,
0b110011100110,
0b100000011110,
0b100100000010,
0b001000100001,
0b011000011111,
0b001001101001,
0b000100011100,
0b100001010000,
0b100000110010,
0b111001101000,
0b100011101101,
0b000111000101,
0b000011000101,
0b111110001011,
0b001111011101,
0b110110010100,
0b011010011011,
0b111111111010,
0b001010111111,
0b101111101001,
0b010000111100,
0b111010110111,
0b100100011000,
0b111010010110,
0b010100111100,
0b101001010000,
0b011100011011,
0b100101001110,
0b011100010110,
0b111010011100,
0b100110011001,
0b100110000110,
0b111010110010,
0b011000010111,
0b111101000110,
0b000001000011,
0b001011111011,
0b011100000111,
0b111011100100,
0b101111110000,
0b011111010010,
0b001100111000,
0b011001000010,
0b100110100111,
0b101000101110,
0b110100101100,
0b011101001100,
0b111100100011,
0b110101001101,
0b101111000110,
0b111010100100,
0b100101010101,
0b111011100000,
0b011100101010,
0b111111001111,
0b010010100001,
0b111001111111,
0b101000110101,
0b010001101010,
0b000110110011,
0b001010110011,
0b110001101001,
0b110110000011,
0b100111110011,
0b000100101100,
0b111010101100,
0b101011101100,
0b010110000100,
0b101001010101,
0b000001010011,
0b011110000000,
0b101111110011,
0b001010001000,
0b110000010001,
0b101010101100,
0b011010111010,
0b010100101000,
0b101100011011,
0b010010101011,
0b110101110001,
0b010101001101,
0b011110011001,
0b100000110011,
0b010110110000,
0b101100100010,
0b010000110100,
0b001000100101,
0b100011100011,
0b111000010110,
0b000110011000,
0b000011011000,
0b010101001000,
0b101000010100,
0b111011111011,
0b010110010001,
0b100111100011,
0b011011111100,
0b001010011110,
0b011110110101,
0b111100101110,
0b001001011110,
0b010100010111,
0b100011010001,
0b110110000111,
0b001000001101,
0b001011110001,
0b111001000011,
0b101101011101,
0b111000111010,
0b111111110001,
0b001100000000,
0b110011011010,
0b011010101001,
0b011010101011,
0b011010011100,
0b100100111110,
0b111001011110,
0b001010001101,
0b101101010100,
0b100100110100,
0b011000111111,
0b101011010100,
0b111010100110,
0b001111010010,
0b011001100000,
0b011010010100,
0b001100001010,
0b101001001111,
0b111011110110,
0b100101100001,
0b000100110010,
0b101111001001,
0b111001011000,
0b100010001101,
0b101101001010,
0b011001110001,
0b010110010110,
0b000100010100,
0b011011011100,
0b000101101011,
0b110010011110,
0b010010011010,
0b111110110010,
0b000010001111,
0b000010010011,
0b000000111010,
0b110001100011,
0b000010000100,
0b101011111000,
0b110111001001,
0b101111100000,
0b110101111000,
0b100010000011,
0b000001111111,
0b000110001110,
0b000010000000,
0b110110011110,
0b000101101000,
0b001101111011,
0b011101101100,
0b101100011101,
0b110001010100,
0b011010111000,
0b011101101010,
0b110010110101,
0b100101100000,
0b101001011100,
0b100101001010,
0b011110111011,
0b111101111100,
0b101000111001,
0b111001110001,
0b101100001111,
0b100001100111,
0b011001101000,
0b111000100101,
0b000000001011,
0b110011100011,
0b111010001011,
0b111100001011,
0b111101101001,
0b111001101110,
0b000110100101,
0b000111100001,
0b101101101101,
0b100000000011,
0b001100011111,
0b101101111110,
0b101010111000,
0b010100000001,
0b000110011011,
0b000100011000,
0b000001110110,
0b100111101001,
0b001111011110,
0b000010011110,
0b101001000010,
0b101001011111,
0b110011010010,
0b101100010110,
0b101110001111,
0b000111110011,
0b011011101010,
0b101010011010,
0b101100111001,
0b111111000000,
0b101100110101,
0b110100101101,
0b010000100111,
0b110011000001,
0b010001001000,
0b000111110000,
0b100101010110,
0b001010001001,
0b100100111010,
0b001010010110,
0b010111010010,
0b010010100000,
0b010110001011,
0b011001101011,
0b110001000111,
0b111001001000,
0b001101001101,
0b101000111100,
0b100011101001,
0b100011111010,
0b100000010101,
0b110010100110,
0b001000110101,
0b111100011011,
0b011001101010,
0b101011010000,
0b011111001110,
0b010011010111,
0b101100111000,
0b011111011010,
0b110110001010,
0b100010111110,
0b100001001001,
0b000001011101,
0b110001100101,
0b011001100111,
0b111001101010,
0b001000011001,
0b000011101000,
0b100100001001,
0b110001111000,
0b010111000101,
0b000111001101,
0b001110100010,
0b010110101011,
0b100111110001,
0b110000001001,
0b011100111001,
0b100111010000,
0b101111010000,
0b001110110100,
0b010111001010,
0b000100101111,
0b100000010010,
0b110110111000,
0b111010010001,
0b001101011001,
0b001011011100,
0b001001111000,
0b011101001011,
0b001101110111,
0b111111001000,
0b011001001001,
0b011100100111,
0b011011011011,
0b101010100111,
0b010101011100,
0b100000010110,
0b101101110010,
0b110111010001,
0b010000100110,
0b010011100011,
0b101111000011,
0b011110101011,
0b111101110010,
0b001100101111,
0b111101011101,
0b001010010001,
0b001110111110,
0b010101000010,
0b111010101101,
0b100001111000,
0b111100001111,
0b011010100000,
0b110001011110,
0b010000100001,
0b110001001001,
0b100101101011,
0b000010111010,
0b000110101101,
0b100110011000,
0b100100110111,
0b100010000001,
0b001110010000,
0b010001101110,
0b111001000000,
0b100010001011,
0b111010111010,
0b000100001101,
0b010101101000,
0b001101111010,
0b111100110100,
0b010010111100,
0b011010010110,
0b000001100000,
0b111111111001,
0b101001101111,
0b100011000110,
0b001100010110,
0b000110111110,
0b000001010001,
0b101010000011,
0b000110001011,
0b000110101011,
0b000011100111,
0b101011110110,
0b110100000100,
0b111000101101,
0b000100100010,
0b011011111001,
0b000010110000,
0b111010101010,
0b011000001101,
0b101111110001,
0b110101000001,
0b000000110011,
0b000100111111,
0b111001100100,
0b000011100010,
0b001100110001,
0b111000010000,
0b001011000000,
0b111000011011,
0b100001101001,
0b111100001000,
0b001011100000,
0b111101101000,
0b100100101111,
0b110110001111,
0b011110011110,
0b010011011100,
0b110110010001,
0b011001000111,
0b101111110101,
0b011101011111,
0b010100100010,
0b101101010110,
0b010001111111,
0b111110111000,
0b001010110101,
0b111000111000,
0b110101011010,
0b011001110110,
0b011101011001,
0b010100110111,
0b101101111111,
0b111111101011,
0b111010101111,
0b010000111011,
0b111010000111,
0b000100111010,
0b010011000100,
0b101010001011,
0b010111110110,
0b100001100011,
0b111001110100,
0b011000100101,
0b000011111111,
0b100101010111,
0b011000000110,
0b001011001000,
0b011100000000,
0b011110011100,
0b100101001001,
0b000001110000,
0b010110011110,
0b001111000101,
0b100101110001,
0b110111100111,
0b001010010000,
0b110011101011,
0b011111001011,
0b011010110000,
0b011011010110,
0b000111100011,
0b110000001010,
0b000010111101,
0b100100101001,
0b010100000100,
0b001101111100,
0b111000100010,
0b010110000001,
0b111010111101,
0b000001010100,
0b100100100110,
0b110011000000,
0b000111101000,
0b000110101110,
0b011101011010,
0b001100110011,
0b101011111001,
0b001101001011,
0b100110011100,
0b110001111001,
0b101101001100,
0b110000110011,
0b110000111110,
0b000010101010,
0b010001111010,
0b001100001001,
0b111000011100,
0b101011000001,
0b101000011110,
0b111001010101,
0b010001100001,
0b011001111001,
0b100010100001,
0b111101011110,
0b111110100001,
0b001011000011,
0b100010110111,
0b010100101110,
0b110001110011,
0b111001011111,
0b001101000010,
0b000001111110,
0b010011101100,
0b111010110000,
0b110001100001,
0b101001111001,
0b000101100001,
0b111110110110,
0b010010001110,
0b001010001111,
0b001010001100,
0b111000000010,
0b000101000011,
0b010110000101,
0b011111110111,
0b000000000111,
0b011101100000,
0b000011110010,
0b010110100100,
0b111011000101,
0b010111011001,
0b111111100011,
0b010111001011,
0b101110111110,
0b100001110110,
0b111110111100,
0b110011000110,
0b101100110111,
0b001000011111,
0b000000111111,
0b010100010000,
0b100000001111,
0b100010101000,
0b110110001101,
0b010101100101,
0b111110101111,
0b010010110011,
0b000101011000,
0b110001110100,
0b001111111010,
0b110100111110,
0b111010111111,
0b110100110101,
0b100000111111,
0b011011101110,
0b000001101000,
0b110011100010,
0b111011110101,
0b111100000010,
0b101000001110,
0b100101101001,
0b101110010111,
0b000001100001,
0b000101001111,
0b000101101010,
0b101011001010,
0b001100001100,
0b111010110110,
0b101100000100,
0b010011010011,
0b001000100111,
0b001110100001,
0b010101011101,
0b101011111101,
0b111110110011,
0b001101100000,
0b101111000010,
0b001110010101,
0b000111111100,
0b000110000100,
0b000101111001,
0b000011111000,
0b000010000110,
0b001010011000,
0b111111101001,
0b011000001111,
0b111010100001,
0b111110001111,
0b101110010110,
0b010011000011,
0b110001000010,
0b110111100110,
0b010100000111,
0b000011000010,
0b000000010010,
0b100111111011,
0b001011111000,
0b110010001100,
0b000111011101,
0b000101001010,
0b001100110101,
0b110110110000,
0b110111100101,
0b000000111000,
0b100011100111,
0b100100111101,
0b011011001011,
0b000100101000,
0b111101010101,
0b010011111101,
0b110100110100,
0b110011111011,
0b100111011011,
0b101000100100,
0b011000001110,
0b101000001000,
0b110101011001,
0b100110111100,
0b110010000001,
0b000111000011,
0b010001001100,
0b101001000100,
0b100000101101,
0b011011111010,
0b101000100010,
0b011001011111,
0b011001000001,
0b001100011010,
0b100011011111,
0b110011010111,
0b111000101000,
0b001001110110,
0b101010101011,
0b001110110110,
0b011111010011,
0b100111111010,
0b001111101110,
0b110010101000,
0b000001111000,
0b100110111101,
0b110110001001,
0b111000011111,
0b011111000111,
0b111100011000,
0b101001000110,
0b110010000010,
0b000100111000,
0b001000101000,
0b011100100001,
0b101101101010,
0b110110111011,
0b001011101100,
0b110111110111,
0b011000111101,
0b110000111000,
0b101010000101,
0b111010011011,
0b111011101010,
0b101100101100,
0b000110101000,
0b110011111001,
0b010111011000,
0b100101111101,
0b101110110000,
0b100001111010,
0b110101100001,
0b100010011110,
0b011000100100,
0b101110101111,
0b111011011110,
0b000110110100,
0b010100001100,
0b101001101000,
0b001001000010,
0b100110001001,
0b001011111100,
0b100011111100,
0b011100001011,
0b001100000100,
0b100111001011,
0b011101000101,
0b011110000100,
0b011011011101,
0b001001011010,
0b110110011101,
0b000000001100,
0b010111100101,
0b111011011101,
0b000100101110,
0b001100011001,
0b110001001110,
0b101010100001,
0b011101100011,
0b100000111000,
0b111111100111,
0b001000100011,
0b110000000011,
0b101001010010,
0b111101010100,
0b111101111110,
0b001110100100,
0b111100100010,
0b010000100101,
0b010100001101,
0b011010011110,
0b001110000110,
0b101000000001,
0b010111111000,
0b111111011011,
0b110110101010,
0b000000110110,
0b111001111010,
0b001110110010,
0b111011010110,
0b001100100010,
0b011111000100,
0b000111010000,
0b100101110111,
0b001011110011,
0b111110011011,
0b111001010011,
0b000110011100,
0b010111000111,
0b101000001100,
0b010101111011,
0b100001011011,
0b010100110101,
0b010000000000,
0b110010011100,
0b110101001110,
0b111010111110,
0b101101110101,
0b011010101111,
0b101010011110,
0b010111110100,
0b010100110011,
0b110110001100,
0b001011110100,
0b010001000000,
0b100011010110,
0b100111000000,
0b010111100000,
0b100010100110,
0b001100101101,
0b010111100110,
0b101101000100,
0b101110011001,
0b011011100101,
0b101101101111,
0b110010100000,
0b100100100010,
0b001100110000,
0b110110011100,
0b000010000001,
0b101001101001,
0b001001100110,
0b000101100011,
0b111101000111,
0b000110000011,
0b011011110000,
0b110010000011,
0b010111000001,
0b101101011001,
0b101100001001,
0b101100010101,
0b011010011111,
0b010100011100,
0b100111100111,
0b101110100110,
0b101011010101,
0b110110101111,
0b010001010101,
0b000010001100,
0b001110000001,
0b110011111100,
0b000001111001,
0b001000111101,
0b010011110001,
0b110100010010,
0b100000100101,
0b100100000011,
0b111110010000,
0b110010001001,
0b011111100001,
0b010011011001,
0b111110110001,
0b000011010010,
0b011101101011,
0b110011100001,
0b000110101111,
0b001111101101,
0b110101110000,
0b001000011101,
0b111111001100,
0b110101101111,
0b000110111000,
0b101100010100,
0b011101100100,
0b111000101010,
0b110001001011,
0b100010001111,
0b001101000111,
0b011000010000,
0b110010110001,
0b111100100001,
0b110111110110,
0b000010000011,
0b100001111110,
0b111001001001,
0b001011011101,
0b000100011101,
0b001100100111,
0b000011010001,
0b111111001110,
0b001111111101,
0b110001110001,
0b101010011101,
0b110010010101,
0b001011010101,
0b111110010011,
0b011001101110,
0b101000011100,
0b110100011111,
0b000001001111,
0b100001111001,
0b001101110110,
0b010111111100,
0b111101011111,
0b001111110001,
0b101001101110,
0b100100100111,
0b100010011100,
0b010110011111,
0b100010111011,
0b111011110010,
0b111010010011,
0b111001111100,
0b011100010011,
0b001010100100,
0b111001100101,
0b111100011001,
0b101110001011,
0b100000011111,
0b010010011000,
0b100001000011,
0b001001111101,
0b010111001100,
0b100101011101,
0b110011101010,
0b010010101110,
0b100011001101,
0b101100101001,
0b011110010000,
0b101000011010,
0b110100010101,
0b010110111110,
0b011110010111,
0b100000001000,
0b101000011000,
0b000111100111,
0b011001100110,
0b001010011001,
0b011011101011,
0b101000000110,
0b000100010010,
0b100100101011,
0b000101011111,
0b010000110101,
0b000000011010,
0b111101111001,
0b111011011111,
0b010000001001,
0b100101100011,
0b000111011001,
0b111011011011,
0b000011011001,
0b111101011001,
0b001000001100,
0b000110001000,
0b110111010010,
0b101100101011,
0b111101110001,
0b110101101101,
0b100111001110,
0b110010111110,
0b000010001010,
0b101101000001,
0b000011101111,
0b110000100100,
0b010001101001,
0b000000001110,
0b001110011101,
0b000100101011,
0b110100111100,
0b011000100111,
0b001110101101,
0b010101100100,
0b101110100000,
0b100110001010,
0b101110010000,
0b000111111010,
0b011011110101,
0b001111110100,
0b000111110110,
0b101011111110,
0b100010110000,
0b100100100101,
0b101000001101,
0b010011111111,
0b001110111001,
0b101010110110,
0b110010011011,
0b110001001000,
0b101110100011,
0b101001011000,
0b100111101110,
0b100111000111,
0b001000111100,
0b010101111010,
0b100010100101,
0b110011010011,
0b100100000111,
0b111010101001,
0b110001001101,
0b011000101001,
0b000110100001,
0b100011111110,
0b001100011000,
0b110100010000,
0b001010110100,
0b000100000110,
0b001011101010,
0b001100100110,
0b011111101011,
0b000101111101,
0b001110110101,
0b110000001111,
0b001010000011,
0b110101001000,
0b001000010001,
0b111011101011,
0b001001011101,
0b000001000000,
0b000110010101,
0b100110101010,
0b101010000111,
0b110101101110,
0b100000010011,
0b001110001011,
0b011110000010,
0b100000100010,
0b111111101100,
0b011010000011,
0b001101001110,
0b011100001000,
0b000001001110,
0b000111001000,
0b100100011010,
0b010000010100,
0b111110001100,
0b111100101111,
0b101000100101,
0b011100101110,
0b000011101101,
0b000100100100,
0b011111111001,
0b000100110011,
0b001011001011,
0b110101100000,
0b101111111011,
0b001101111101,
0b100110100011 };
Console.WriteLine($"test = {Day3(Test)}");
Console.WriteLine($"part1 = {Day3(Real)}");
Console.WriteLine($"part2 test = {Day3Pt2(Test)}");
Console.WriteLine($"part2 = {Day3Pt2(Real)}");

static int Day3(int[] readings)
{
    var bits = Convert.ToString(readings.Max(), 2).Length - 1;
    int gamma = 0, epsilon = 0;
    for (var x = bits; x >= 0; x--)
    {
        var bit = 1 << x;
        int ones = 0, zeros = 0;
        foreach (var y in readings)
        {
            if ((y & bit) > 0)
            {
                ones++;
            }
            else
            {
                zeros++;
            }
        }
        gamma += ones > zeros ? bit : 0;
        epsilon += ones > zeros ? 0 : bit;
    }
    return gamma * epsilon;
}

static int Day3Pt2(int[] readings)
{
    var list = readings.ToList();
    var bits = Convert.ToString(readings.Max(), 2).Length - 1;
    for (var bitNumber = bits; bitNumber >= 0; bitNumber--)
    {
        var bit = 1 << bitNumber;
        int ones = 0, zeros = 0;
        foreach (var y in list)
        {
            if ((y & bit) > 0)
            {
                ones++;
            }
            else
            {
                zeros++;
            }
        }
        var toRemove = ones < zeros ? bit : 0;

        var list1 = list.Where(x => (x & bit) == toRemove);
        list.RemoveAll(x => (list1.Contains(x)));
        list.TrimExcess();
        if (list.Count == 1)
        {
            break;
        }
    }
    var gamma = list[0];
    list = readings.ToList();
    for (var bitNumber = bits; bitNumber >= 0; bitNumber--)
    {
        var bit = 1 << bitNumber;
        int ones = 0, zeros = 0;
        foreach (var y in list)
        {
            if ((y & bit) > 0)
            {
                ones++;
            }
            else
            {
                zeros++;
            }
        }
        var toRemove = ones < zeros ? bit : 0;

        var list1 = list.Where(x => (x & bit) == toRemove);
        list.RemoveAll(x => (!list1.Contains(x)));
        list.TrimExcess();

        if (list.Count == 1)
        {
            break;
        }
    }
    var epsilon = list[0];
    return gamma * epsilon;
}